package com.Michal.Libera;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.LinkedList;
import java.util.List;

//Klasa realizuje zarządzanie przykładową relacyjną bazą danych w oparciu o SQLLite


public class Biblioteka {

	public static final String DRIVER = "org.sqlite.JDBC";
	public static final String DB_URL = "jdbc:sqlite:biblioteka.db";
	
	private Connection conn;
	private Statement stat;
	
	public Biblioteka(){
		
		try{
			
			Class.forName(Biblioteka.DRIVER);
		}
		
		catch(ClassNotFoundException e){
			
			System.err.println("Brak sterownika JDBC");
			e.printStackTrace();
		}
		
		try{
			
			conn = DriverManager.getConnection(DB_URL);
			stat = conn.createStatement();
		}
		
		catch(SQLException e){
			
			System.err.println("Blad polaczenia z baza danych");
			e.printStackTrace();
		}
		
		createTables();
		
		
	}
	
	public boolean createTables(){
		
		// zapytania SQL do utworzenia tabel
		String createTable = "CREATE TABLE IF NOT EXISTS czytelnicy (id_czytelnika INTEGER PRIMARY KEY AUTOINCREMENT, imie varchar(255), nazwisko varchar(255), pesel int)";
		String createKsiazki = "CREATE TABLE IF NOT EXISTS ksiazki (id_ksiazki INTEGER PRIMARY KEY AUTOINCREMENT, tytul varchar(255), autor varchar(255))";
		String createWypozyczenia = "CREATE TABLE IF NOT EXISTS wypozyczenia (id_wypozycz INTEGER PRIMARY KEY AUTOINCREMENT, id_czytelnika int, id_ksiazki int)";
		
		try{
			stat.execute(createTable);
			stat.execute(createKsiazki);
			stat.execute(createWypozyczenia);
			
		}
		catch(SQLException e){
			
			System.err.println("Blad przy tworzeniu tabeli!");
			e.printStackTrace();
			return false;
		}
		return true;
	}
	
	public boolean insertCzytelnik(String imie, String nazwisko, String pesel){
		
		List<Czytelnik> czytelnicy = new LinkedList<Czytelnik>();	//sprawdzanie czy nie ma takiego rekordu
        try {
            ResultSet result = stat.executeQuery("SELECT pesel FROM czytelnicy");
        }
        catch(SQLException e){
        	
        	System.err.println("Blad zapytania");
        	e.printStackTrace();
        	return null;
        }
		try{
		PreparedStatement prepStm = conn.prepareStatement("insert into czytelnicy values (NULL, ?, ?, ?);");
		prepStm.setString(1, imie);
		prepStm.setString(2, nazwisko);
		prepStm.setString(3, pesel);
		prepStm.execute();
		}
		
		catch(SQLException e){
			
			System.err.println("Blad przy wkladaniu danych do tabeli");
			e.printStackTrace();
			return false;
			
		}
		return true;
		
		}
	
	public boolean insertKsiazka(String tytul, String autor) {
        try {
            PreparedStatement prepStmt = conn.prepareStatement(
                    "insert into ksiazki values (NULL, ?, ?);");
            prepStmt.setString(1, tytul);
            prepStmt.setString(2, autor);
            prepStmt.execute();
        } catch (SQLException e) {
            System.err.println("Blad przy wypozyczaniu");
            return false;
        }
        return true;
    }
 
    public boolean insertWypozycz(int idCzytelnik, int idKsiazka) {
        try {
            PreparedStatement prepStmt = conn.prepareStatement(
                    "insert into wypozyczenia values (NULL, ?, ?);");
            prepStmt.setInt(1, idCzytelnik);
            prepStmt.setInt(2, idKsiazka);
            prepStmt.execute();
        } catch (SQLException e) {
            System.err.println("Blad przy wypozyczaniu");
            return false;
        }
        return true;
    }
 
    public List<Czytelnik> selectCzytelnicy() {
        List<Czytelnik> czytelnicy = new LinkedList<Czytelnik>();
        try {
            ResultSet result = stat.executeQuery("SELECT * FROM czytelnicy");
            int id;
            String imie, nazwisko, pesel;
            while(result.next()) {
                id = result.getInt("id_czytelnika");
                imie = result.getString("imie");
                nazwisko = result.getString("nazwisko");
                pesel = result.getString("pesel");
                czytelnicy.add(new Czytelnik(id, imie, nazwisko, pesel));
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
        return czytelnicy;
    }
 
    public List<Ksiazka> selectKsiazki() {
        List<Ksiazka> ksiazki = new LinkedList<Ksiazka>();
        try {
            ResultSet result = stat.executeQuery("SELECT * FROM ksiazki");
            int id;
            String tytul, autor;
            while(result.next()) {
                id = result.getInt("id_ksiazki");
                tytul = result.getString("tytul");
                autor = result.getString("autor");
                ksiazki.add(new Ksiazka(id, tytul, autor));
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
        return ksiazki;
    }
	
	public void closeConnection() {
        try {
            conn.close();
        } catch (SQLException e) {
            System.err.println("Problem z zamknieciem polaczenia");
            e.printStackTrace();
        }
    }
	
}
